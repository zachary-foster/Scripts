taxon_data$optimal_threshold[taxon_data$clustering_level==my_level],
scaling= taxon_data$subsampled_count[taxon_data$clustering_level==my_level],
value_range=c(0.03, 0.97),
labels=TRUE,
label_color='#AAAAAA',
save=output_path)
}
}
for (my_level in unique(taxon_data$clustering_level)) {
if (length(taxon_data$taxon[taxon_data$clustering_level==my_level]) > 1) {
output_name <- paste("error_value_tree_", as.character(my_level), '.png', sep='')
output_path <- file.path(taxon_data_folder, output_name)
print(output_name)
plot_value_tree(taxon_data$taxon[taxon_data$clustering_level==my_level],
taxon_data$optimal_error[taxon_data$clustering_level==my_level],
scaling= taxon_data$subsampled_count[taxon_data$clustering_level==my_level],
value_range=c(0.03, 0.97),
labels=TRUE,
label_color='#AAAAAA',
save=output_path)
}
}
library(seqinr)
?closebank
download_taxon_gene(taxon="boletales", gene=c("@16S@", "@28S@"), type="RRNA", database="genbank")
download_taxon_gene
taxon="boletales", gene=c("@16S@", "@28S@"), type="RRNA", database="genbank"
taxon="boletales"; gene=c("@16S@", "@28S@"); type="RRNA"; database="genbank"
choosebank(database)
query("taxon_query", paste('sp="', taxon, '"', sep=''), virtual=TRUE)
paste('sp="', taxon, '"', sep='')
cat(paste('sp="', taxon, '"', sep=''))
query("taxon_query", paste('"sp=', taxon, '"', sep=''), virtual=TRUE)
taxon_query
str(taxon_query)
length(taxon_query)
length(taxon_query$rep)
length(taxon_query$req)
taxon_query$nelem,
taxon_query$nelem
for (item in gene) paste('taxon_query ET "T=', type, '" ET "K=', item, '"', sep="")
for (item in gene) cat(paste('taxon_query ET "T=', type, '" ET "K=', item, '"', sep=""))
for (item in gene) cat(paste('taxon_query ET "T=', type, '" ET "K=', item, '"\n', sep=""))
paste(gene, collapse=" ET ")
?query
query("taxon_query", paste('"sp=', taxon, '"', sep=''), virtual=TRUE)
for (item in gene) {
query(gene, paste('taxon_query AND "T=', type, '" AND "K=', item, '"', sep=""), virtual=TRUE)
query(gene, paste("PAR", gene), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
closebank()
for (item in gene) {
cat(paste('taxon_query AND T=', type, ' AND K=', item, sep=""))
query(gene, paste('taxon_query AND T=', type, ' AND K=', item, sep=""), virtual=TRUE)
query(gene, paste("PAR", gene), virtual=TRUE) # Replace by parent sequences
}
query("taxon_query", paste('"sp=', taxon, '"', sep=''), virtual=TRUE)
for (item in gene) {
cat(paste('taxon_query AND T=', type, ' AND K=', item, sep=""))
query(gene, paste('taxon_query AND T=', type, ' AND K=', item, sep=""), virtual=TRUE)
query(gene, paste("PAR", gene), virtual=TRUE) # Replace by parent sequences
}
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
closebank()
closebank()
closebank()
choosebank(database)
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
taxon_query
for (item in gene) {
cat(paste('taxon_query AND T=', type, ' AND K=', item, sep=""))
query(gene, paste('taxon_query AND T=', type, ' AND K=', item, sep=""), virtual=TRUE)
query(gene, paste("PAR", gene), virtual=TRUE) # Replace by parent sequences
}
\@28S@
@28S@
along(genes)
along(gene
)
paste("query", 1:length(genes), sep="_")
paste("query", 1:length(gene), sep="_")
closebank()
closebank()
choosebank(database)
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(gene) <- paste("query", 1:length(gene), sep="_")
for (item in gene) {
cat(paste('taxon_query AND T=', type, ' AND K=', item, sep=""))
query(item, paste('taxon_query AND T=', type, ' AND K=', item, sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
gene_query
gene_query$req
taxon =  "Basidiomycota"
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(gene) <- paste("query", 1:length(gene), sep="_")
for (item in gene) {
cat(paste('taxon_query AND T=', type, ' AND K=', item, sep=""))
query(item, paste('taxon_query AND T=', type, ' AND K=', item, sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
gene_query$req
gene
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(gene) <- paste("query", 1:length(gene), sep="_")
for (item in gene) {
query(item, paste('taxon_query AND T=', type, ' AND K=', item, sep=""), virtual=TRUE)
#query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
gene_query$req
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(gene) <- paste("query", 1:length(gene), sep="_")
for (item in gene) {
query(name(item), paste('taxon_query AND T=', type, ' AND K=', item, sep=""), virtual=TRUE)
#query(name(item), paste("PAR", name(item)), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(gene) <- paste("query", 1:length(gene), sep="_")
for (item in gene) {
query(names(item), paste('taxon_query AND T=', type, ' AND K=', item, sep=""), virtual=TRUE)
#query(names(item), paste("PAR", names(item)), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
gene
names(gene)
gene["query_1"]
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(gene) <- paste("query", 1:length(gene), sep="_")
for (item in names(gene)) {
query(item, paste('taxon_query AND T=', type, ' AND K=', gene[item], sep=""), virtual=TRUE)
#query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
gene_query$req
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(gene) <- paste("query", 1:length(gene), sep="_")
for (item in names(gene)) {
query(item, paste('taxon_query AND T=', type, ' AND K=', gene[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
gene_query$req
gene
taxon
taxon = "fungi"
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
taxon_query$nelem
for (item in names(gene)) {
query(item, paste('taxon_query AND T=', type, ' AND K=', gene[item], sep=""), virtual=TRUE)
#query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query_1$nelem
query_2$nelem
for (item in names(gene)) {
#query(item, paste('taxon_query AND T=', type, ' AND K=', gene[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query_1$nelem
query_2$nelem
query('gene_query', paste(gene, collapse=" AND "))
gene_query
genes
genes
gene
gene[1] <- "@18S@"
gene
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(gene) <- paste("query", 1:length(gene), sep="_")
for (item in names(gene)) {
query(item, paste('taxon_query AND T=', type, ' AND K=', gene[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
for (item in names(gene)) cat(item)
gene
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(gene) <- paste("query", 1:length(gene), sep="_")
for (item in names(gene)) {
cat(item)
query(item, paste('taxon_query AND T=', type, ' AND K=', gene[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(gene, collapse=" AND "))
query('gene_query', paste(names(gene), collapse=" AND "))
query_1$nelem
query_2$nelem
gene_query$nelem
getTypes()
getType()
x = 1:3
y = 4:6
z = "z"
mapply(paste, x,y,z)
?closebank()
query_1$call
query_1$name
closebank()
query_1$name
?sockconn
gene_query$call
gene_query$socket
query_taxon <- function(query_id, taxon, key, type)   {
single_query <- function(taxon, key) {
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(key) <- paste("query", 1:length(key), sep="_")
for (item in names(key)) {
query(item, paste('taxon_query AND T=', type, ' AND K=', key[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(names(key), collapse=" AND ", virtual=TRUE))
return(gene_query)
}
queries <- mapply(single_query, taxon, key, database)
query_names <- sapply(queries, function(x) x$name)
return(query(query_id, paste(query_names, collapse=" OR ")))
}
my_test <- query_taxon("test", c("phytophthora", "pythium"), c("@18S@", "@28S@"), "RRNA")
query_taxon <- function(query_id, taxon, key, type)   {
single_query <- function(taxon, key) {
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(key) <- paste("query", 1:length(key), sep="_")
for (item in names(key)) {
query(item, paste('taxon_query AND T=', type, ' AND K=', key[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(names(key), collapse=" AND ", virtual=TRUE))
return(gene_query)
}
queries <- mapply(single_query, taxon, key)
query_names <- sapply(queries, function(x) x$name)
return(query(query_id, paste(query_names, collapse=" OR ")))
}
my_test <- query_taxon("test", c("phytophthora", "pythium"), c("@18S@", "@28S@"), "RRNA")
closebank()
closebank()
choosebank("genbank")
my_test <- query_taxon("test", c("phytophthora", "pythium"), c("@18S@", "@28S@"), "RRNA")
query_taxon <- function(query_id, taxon, key, type)   {
single_query <- function(taxon, key) {
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(key) <- paste("query", 1:length(key), sep="_")
for (item in names(key)) {
query(item, paste('taxon_query AND T=', type, ' AND K=', key[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(names(key), collapse=" AND "), virtual=TRUE)
return(gene_query)
}
queries <- mapply(single_query, taxon, key)
query_names <- sapply(queries, function(x) x$name)
return(query(query_id, paste(query_names, collapse=" OR ")))
}
my_test <- query_taxon("test", c("phytophthora", "pythium"), c("@18S@", "@28S@"), "RRNA")
?
browser
query_taxon <- function(query_id, taxon, key, type)   {
single_query <- function(taxon, key) {
query("taxon_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(key) <- paste("query", 1:length(key), sep="_")
for (item in names(key)) {
query(item, paste('taxon_query AND T=', type, ' AND K=', key[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
query('gene_query', paste(names(key), collapse=" AND "), virtual=TRUE)
return(gene_query)
}
browser()
queries <- mapply(single_query, taxon, key)
browser()
query_names <- sapply(queries, function(x) x$name)
return(query(query_id, paste(query_names, collapse=" OR ")))
}
my_test <- query_taxon("test", c("phytophthora", "pythium"), c("@18S@", "@28S@"), "RRNA")
quesies
queries
queries
queries
str(queries)
sapply(queries, function(x) x$name)
apply(queries,MARGIN=2, function(x) x$name)
query_taxon <- function(query_id, taxon, key, type)   {
single_query <- function(query_id, taxon, key) {
query("single_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(key) <- paste("key_query", 1:length(key), sep="_")
for (item in names(key)) {
query(item, paste('single_query AND T=', type, ' AND K=', key[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
return(query(query_id, paste(names(key), collapse=" AND "), virtual=TRUE))
}
queries <- mapply(single_query, paste("taxon_query", 1:length(taxon), sep="_"), taxon, key)
browser()
query_names <- sapply(queries, function(x) x$name)
return(query(query_id, paste(query_names, collapse=" OR ")))
}
query_taxon <- function(query_id, taxon, key, type)   {
single_query <- function(query_id, taxon, key) {
query("single_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(key) <- paste("key_query", 1:length(key), sep="_")
for (item in names(key)) {
query(item, paste('single_query AND T=', type, ' AND K=', key[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
return(query(query_id, paste(names(key), collapse=" AND "), virtual=TRUE))
}
queries <- mapply(single_query, paste("taxon_query", 1:length(taxon), sep="_"), taxon, key)
browser()
query_names <- sapply(queries, function(x) x$name)
return(query(query_id, paste(query_names, collapse=" OR ")))
}
my_test <- query_taxon("test", c("phytophthora", "pythium"), c("@18S@", "@28S@"), "RRNA")
queries
sapply(queries, function(x) x$name)
apply(queries, MARGIN=2, function(x) x$name)
query_taxon <- function(query_id, taxon, key, type)   {
single_query <- function(query_id, taxon, key) {
query("single_query", paste('sp=', taxon, sep=''), virtual=TRUE)
names(key) <- paste("key_query", 1:length(key), sep="_")
for (item in names(key)) {
query(item, paste('single_query AND T=', type, ' AND K=', key[item], sep=""), virtual=TRUE)
query(item, paste("PAR", item), virtual=TRUE) # Replace by parent sequences
}
return(query(query_id, paste(names(key), collapse=" AND "), virtual=TRUE))
}
queries <- mapply(single_query, paste("taxon_query", 1:length(taxon), sep="_"), taxon, key)
browser()
query_names <- apply(queries, MARGIN=2, function(x) x$name)
return(query(query_id, paste(query_names, collapse=" OR ")))
}
my_test <- query_taxon("test", c("phytophthora", "pythium"), c("@18S@", "@28S@"), "RRNA")
my_test
my_test$req
sapply(my_test$req, function(x) x#length)
)
sapply(my_test$req, function(x) x$length)
lapply(my_test$req, function(x) x$length)
lapply(my_test$req, function(x) attribute(x, "length"))
lapply(my_test$req, function(x) attr(x, "length"))
sapply(my_test$req, function(x) attr(x, "length"))
hist*sapply(my_test$req, function(x) attr(x, "length")))
hist(sapply(my_test$req, function(x) attr(x, "length")))
?extractseqs
?getSequence
seq <-  getSequence(my_test$req[1:100])
seq
sapply(seq, length9
)
sapply(seq, length)
names(seq)
n <-  getName(my_test$req[1:100])
n
?getName
ann <-  getAnnot(my_test$req[1:10])
ann
str(ann'')
str(ann)
ann[[1]]
library(taxize)
n
x <- ncbi_getbyid(ids=n[1:10], format="fasta", verbose=FALSE)
x
length(x)
sapply(x, length)
sapply(x, nchar)
n
annc(1, FALSE)
c(1, FALSE)
c(list(1), "a")
c(TRUE, 1L)
FALSE > NA
y <- 1:10
attr(y, "my_attribute") <- "This is a vector"
attr(y, "my_attribute")
#> [1] "This is a vector"
str(attributes(y))
#> List of 1
#>  $ my_attribute: chr "This is a vector"
y
sum(y)
attributes(y)
attr(y)
structure(y, "func")
structure(y, "func"="x")
func
func(y)
structure(y, "func"=cat(12))
structure(y, "func"=cat(12))
structure(y, "func"=cat
)
structure(y, "func"=sum)
func(y)
y = 1:4
dim(y) <- c(2,2)
typeof(y)
class(y)
dim(y) <- c(1,1,1,1)
dim(y) <- c(1,1,1\)
dim(y) <- c(1,1,1)
y = 1:8
dim(y) <- c(2,2,2)
y
class()
class(y)
length(y)
dim(y)
dimnames(y) <- letters[1:8]
names(y) <- letters[1:8]
y
match(1:10, 3:7)
1:5 %in% 1:15
1:5 %in% 10:15
1:5 %in% 3:15
1:5 %%in%% 3:15
(1:5) %in% (3:15)
(1:5) %in% list(3:15)
(1:5) in list(3:15)
(1:5 in list(3:15))
with?
?wegf3
?with
?assign
?get
?identical
?complete.cases
?is.finite
?'%/%'
?rle
?mising
?missing
?on.exit()
?swep
?sweep
#' @importFrom seqinr query
require(stats) # for median
med.att <- apply(attitude, 2, median)
sweep(data.matrix(attitude), 2, med.att)  # subtract the column medians
## More sweeping:
A <- array(1:24, dim = 4:2)
## no warnings in normal use
sweep(A, 1, 5)
a
A
?vapply
?tappply
?tapply
require(stats)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
tapply(groups, groups, length) #- is almost the same as
groups
n <- 17; fac <- factor(rep(1:3, length = n), levels = 1:5)
table(fac)
tapply(1:n, fac, sum)
tapply(1:n, fac, sum, simplify = FALSE)
tapply(1:n, fac, range)
tapply(1:n, fac, quantile)
fac
?findInterval
?relevel
?ftable
?q
?recover
?try
?normalizePath
?file.choose
plot(1:5, col = "red")
plot(1:5, cex = 5, pch = 20)
\?(banknameSocket
?banknameSocket
?taxize
devtools::install_github("ropensci/taxize")
library('taxize')
?ncbi_getbyname
source("functions.R")
source("constants.R")
#Parameters
distance_matrix_file = "/home/local/USDA-ARS/fosterz/Repositories/Analysis/taxon_specific_barcode_gap/rdp_fungi_28s_1/distance_matrix_pid.txt"
output_directory = "/home/local/USDA-ARS/fosterz/Repositories/Analysis/taxon_specific_barcode_gap/rdp_fungi_28s_1/pid"
#load and format distance matrix (CAN TAKE LONG TIME)
distance_matrix = as.matrix(read.csv(distance_matrix_file, sep="\t", row.names=1, header=FALSE))
distance_matrix_taxonomy <- sapply(strsplit(distance_matrix_names, split='|', fixed=TRUE), function(x) x[3])
row.names(distance_matrix) <- distance_matrix_taxonomy
colnames(distance_matrix) <- distance_matrix_taxonomy
View(distance_matrix)
source("functions.R")
source("constants.R")
#Parameters
distance_matrix_file = "/home/local/USDA-ARS/fosterz/Repositories/Analysis/taxon_specific_barcode_gap/rdp_fungi_28s_1/distance_matrix_pid.txt"
output_directory = "~/test"
#load and format distance matrix (CAN TAKE LONG TIME)
distance_matrix = as.matrix(read.csv(distance_matrix_file, sep="\t", row.names=1, header=FALSE))
distance_matrix_names = row.names(distance_matrix)
distance_matrix_taxonomy <- sapply(strsplit(distance_matrix_names, split='|', fixed=TRUE), function(x) x[3])
row.names(distance_matrix) <- distance_matrix_taxonomy
colnames(distance_matrix) <- distance_matrix_taxonomy
#Calculate statistics
statistics <- lapply(clustering_levels, function(x)
calculate_barcode_statistics(distance_matrix, taxonomy_levels,
level_to_analyze= x,
saved_output_path = output_directory,
save_statistics = TRUE,
save_raw_data = TRUE,
save_plots = TRUE,
distance_bin_width = 0.001,
threshold_resolution = 0.001,
max_sequences_to_compare = 500))
traceback
traceback()
